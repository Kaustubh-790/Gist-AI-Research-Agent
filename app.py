import streamlit as st
import time
from main import research_topic
from reportlab.lib.pagesizes import letter, A4
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, PageBreak
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.lib import colors
from io import BytesIO
import streamlit.components.v1 as components

def generate_pdf_report(topic, summary, sources, source_urls=None, tools_used=None):
    buffer = BytesIO()
    
    doc = SimpleDocTemplate(buffer, pagesize=A4, rightMargin=72, leftMargin=72, 
                           topMargin=72, bottomMargin=18)
    
    styles = getSampleStyleSheet()
    
    title_style = ParagraphStyle(
        'CustomTitle',
        parent=styles['Heading1'],
        fontSize=18,
        spaceAfter=30,
        textColor=colors.darkblue,
        alignment=1  
    )
    
    heading_style = ParagraphStyle(
        'CustomHeading',
        parent=styles['Heading2'],
        fontSize=14,
        spaceAfter=12,
        textColor=colors.darkblue
    )
    
    body_style = ParagraphStyle(
        'CustomBody',
        parent=styles['Normal'],
        fontSize=11,
        spaceAfter=12,
        leftIndent=0
    )
    
    story = []
    
    story.append(Paragraph("Research Report", title_style))
    story.append(Spacer(1, 12))
    
    story.append(Paragraph(f"<b>Research Topic:</b> {topic}", heading_style))
    story.append(Spacer(1, 12))
    
    
    story.append(Paragraph("Research Summary", heading_style))
    clean_summary = summary.replace('\n', '<br/>')
    story.append(Paragraph(clean_summary, body_style))
    story.append(Spacer(1, 20))
    
    
    story.append(Paragraph("Sources Analyzed", heading_style))
    if sources:
        for i, source in enumerate(sources, 1):
            if source_urls and i <= len(source_urls):
                source_text = f"{i}. {source} - {source_urls[i-1]}"
            else:
                source_text = f"{i}. {source}"
            story.append(Paragraph(source_text, body_style))
    else:
        story.append(Paragraph("No sources found.", body_style))
    
    story.append(Spacer(1, 20))
    
    
    story.append(Spacer(1, 30))
    story.append(Paragraph("Generated by Gist", 
                          ParagraphStyle('Footer', parent=styles['Normal'], 
                                       fontSize=9, textColor=colors.grey, alignment=1)))
    
    
    doc.build(story)
    
    
    pdf_content = buffer.getvalue()
    buffer.close()
    
    return pdf_content

st.set_page_config(
    page_title="Gist",
    page_icon="ü§ñ",
    layout="wide",
    initial_sidebar_state="expanded"
)

st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        font-weight: bold;
        text-align: center;
        color: white;
        margin-bottom: 1rem;
    }
    
    .sub-header {
        text-align: center;
        color: #B0B0B0;
        margin-bottom: 2rem;
        font-size: 1.1rem;
    }
    
    .search-container {
        background-color: #2E2E2E;
        padding: 2rem;
        border-radius: 12px;
        border: 1px solid #404040;
        margin: 2rem auto;
        max-width: 600px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }
    
    .search-input-container {
        display: flex;
        gap: 0.5rem;
        align-items: center;
    }
    
    .search-input {
        flex: 1;
    }
    
    .search-button {
        background-color: #4F46E5 !important;
        color: white !important;
        border: none !important;
        border-radius: 6px !important;
        padding: 0.5rem 1.5rem !important;
        font-weight: bold !important;
        min-width: 120px !important;
    }
    
    .search-button:hover {
        background-color: #4338CA !important;
    }
    
    .stButton > button {
        background-color: #4F46E5;
        color: white;
        border: none;
        border-radius: 6px;
        padding: 0.5rem 1rem;
        font-weight: bold;
        width: 100%;
    }
    
    .stButton > button:hover {
        background-color: #4338CA;
    }
    
    .sidebar .element-container {
        margin-bottom: 0.5rem;
    }
    
    .sidebar-header {
        display: flex;
        align-items: center;
        justify-content: space-between;
        margin-bottom: 0.5rem;
    }
    
    .sidebar-title {
        margin: 0;
        font-size: 1.5rem;
        font-weight: bold;
        color: white;
    }
    
    .sidebar .stExpander {
        margin-top: 0;
    }
    
    .sidebar .stExpander > div {
        margin-top: 0;
    }
    
    .sidebar {
        padding-top: 0 !important;
    }
    
    .sidebar .element-container:first-child {
        margin-top: 0 !important;
        padding-top: 0 !important;
    }
    
    .sidebar .stMarkdown {
        margin-bottom: 0.5rem;
    }
    
    .inline-expander {
        display: flex;
        align-items: center;
        justify-content: space-between;
        margin-bottom: 0.5rem;
    }
    
    .sidebar > div:first-child {
        margin-top: 0 !important;
        padding-top: 0 !important;
    }
    
    .sidebar .stMarkdown:first-child {
        margin-top: 0 !important;
        padding-top: 0 !important;
    }
    
    .sidebar .stMarkdown h2 {
        margin-top: 0 !important;
        padding-top: 0 !important;
    }
    
    
    .download-buttons {
        display: flex;
        gap: 1rem;
        margin-top: 1rem;
    }
    
    .download-btn {
        flex: 1;
        background-color: #10B981 !important;
        color: white !important;
        border: none !important;
        border-radius: 6px !important;
        padding: 0.5rem 1rem !important;
        font-weight: bold !important;
    }
    
    .download-btn:hover {
        background-color: #059669 !important;
    }
    
    .download-btn-pdf {
        background-color: #EF4444 !important;
    }
    
    .download-btn-pdf:hover {
        background-color: #DC2626 !important;
    }
</style>
""", unsafe_allow_html=True)

if 'research_started' not in st.session_state:
    st.session_state.research_started = False
if 'current_topic' not in st.session_state:
    st.session_state.current_topic = ""
if 'research_result' not in st.session_state:
    st.session_state.research_result = None
if 'time_filter' not in st.session_state:
    st.session_state.time_filter = "Any time"
if 'tone' not in st.session_state:
    st.session_state.tone = "Default"
if 'num_sources' not in st.session_state:
    st.session_state.num_sources = 5
if 'should_run_research' not in st.session_state:
    st.session_state.should_run_research = False
if 'chats' not in st.session_state:
    st.session_state.chats = []
if 'selected_chat_index' not in st.session_state:
    st.session_state.selected_chat_index = None

with st.sidebar:
    
    col1, col2 = st.columns([4, 1])
    with col1:
        st.markdown('<h2 style="margin: 0; color: white;">üß† &nbsp;Gist </h2>', unsafe_allow_html=True)
    with col2:
        
        pass
    
    st.markdown("---")
    st.markdown("### ‚öôÔ∏è Advanced Options")
    
    st.markdown("**Time Filter**")
    time_options = ["Any time", "Past year", "Past month"]
    time_filter = st.radio(
        "Time Filter",
        time_options,
        label_visibility="collapsed",
        key="time_filter_radio"
    )
    st.session_state.time_filter = time_filter
    
    st.markdown("**Tone Selector**")
    tone_options = ["Default", "Academic", "Casual", "Professional", "Creative"]
    tone = st.radio(
        "Tone",
        tone_options,
        label_visibility="collapsed",
        key="tone_radio"
    )
    st.session_state.tone = tone
    
    st.markdown("**Number of Sources**")
    st.session_state.num_sources = st.slider(
        "Sources",
        min_value=1,
        max_value=20,
        value=st.session_state.num_sources,
        label_visibility="collapsed"
    )
    
    st.info(f"**Active Options:**\n- Time: {st.session_state.time_filter}\n- Tone: {st.session_state.tone}\n- Sources: {st.session_state.num_sources}")
    
    st.markdown("---")
    st.markdown('<div class="recent-topics-header">üí¨ Recent Research</div>', unsafe_allow_html=True)
    
    if st.session_state.chats:
        recent_chats = st.session_state.chats[-5:]
        for i, chat in enumerate(reversed(recent_chats)):
            chat_index = len(st.session_state.chats) - 1 - i
            topic = chat["topic"]

            display_topic = topic[:50] + "..." if len(topic) > 50 else topic
            
            if st.button(display_topic, key=f"chat_{chat_index}", help=f"View: {topic}"):
                st.session_state.research_started = True
                st.session_state.current_topic = topic
                st.session_state.research_result = None  
                st.session_state.should_run_research = False  
                st.session_state.selected_chat_index = chat_index  
                st.rerun()
    else:
        st.markdown('<div class="recent-topic-item">No history yet</div>', unsafe_allow_html=True)

if not st.session_state.research_started:
    
    st.markdown('<div class="main-header">Welcome to the Gist!</div>', unsafe_allow_html=True)
    st.markdown('<div class="sub-header">Enter your research topic below to begin.</div>', unsafe_allow_html=True)
    
  
    st.markdown("### üîç Start Your Research")
    
    
    col1, col2 = st.columns([3, 1])
    
    with col1:
        topic_input = st.text_input(
            "Research Topic",
            placeholder="e.g., The future of renewable energy",
            label_visibility="collapsed",
            key="main_search_input"
        )
    
    with col2:
        if st.button("üöÄ Start Research", key="main_search_button", use_container_width=True):
            if topic_input:
                st.session_state.research_started = True
                st.session_state.current_topic = topic_input
                st.session_state.research_result = None  
                st.session_state.should_run_research = True  
                st.session_state.selected_chat_index = None  
                st.success(f"Starting research on: {topic_input}")
                st.rerun()
            else:
                st.error("Please enter a research topic first")
    
    st.markdown('</div>', unsafe_allow_html=True)  

else:
    
    st.markdown(f'<div class="main-header">Research Results</div>', unsafe_allow_html=True)
    st.markdown(f'<div class="sub-header">Topic: {st.session_state.current_topic}</div>', unsafe_allow_html=True)
    
    
    if st.session_state.should_run_research:
        
        with st.spinner("Conducting research..."):
            
            progress_bar = st.progress(0)
            status_text = st.empty()
            
            
            progress_bar.progress(20)
            status_text.text("Searching for sources...")
            
            try:
                
                research_result = research_topic(
                    st.session_state.current_topic,
                    st.session_state.time_filter,
                    st.session_state.tone,
                    st.session_state.num_sources
                )
                
                progress_bar.progress(60)
                status_text.text("Analyzing content...")
                
                progress_bar.progress(80)
                status_text.text("Synthesizing information...")
                
                progress_bar.progress(100)
                status_text.text("Finalizing research...")
                

                st.session_state.research_result = research_result
                
                
                chat_entry = {
                    "topic": research_result.topic,
                    "summary": research_result.summary,
                    "sources": research_result.sources
                }
                st.session_state.chats.append(chat_entry)
                
                st.session_state.should_run_research = False
                
                st.rerun()
                
            except Exception as e:
                st.error(f"Research failed: {str(e)}")
                import traceback
                st.code(traceback.format_exc())
                st.session_state.research_result = None
                st.session_state.should_run_research = False
                st.stop()
    
    
    if st.session_state.research_result:
        st.success("Research completed!")
        
        
        st.markdown("## üìã Research Summary")
        
        result = st.session_state.research_result
        st.write(f"**Topic:** {result.topic}")
        st.write(f"**Summary:** {result.summary}")
        
        if hasattr(result, 'analysis_result') and result.analysis_result:
            analysis = result.analysis_result
            
            if analysis.key_points:
                st.markdown("## üîë Key Points")
                for i, point in enumerate(analysis.key_points, 1):
                    st.write(f"{i}. {point.point}")
                    if point.source_url:
                        st.caption(f"Source: [{point.source_title}]({point.source_url})")
            
            if analysis.trends:
                st.markdown("## üìà Trends & Patterns")
                for trend in analysis.trends:
                    st.subheader(trend.trend)
                    st.write(trend.description)
                    if trend.source_urls:
                        st.caption("Sources: " + ", ".join([f"[{url}]({url})" for url in trend.source_urls]))
            
            if analysis.viewpoints:
                st.markdown("## üí≠ Different Viewpoints")
                for viewpoint in analysis.viewpoints:
                    st.subheader(viewpoint.perspective)
                    for evidence in viewpoint.supporting_evidence:
                        st.write(f"‚Ä¢ {evidence}")
                    if viewpoint.source_urls:
                        st.caption("Sources: " + ", ".join([f"[{url}]({url})" for url in viewpoint.source_urls]))
            
            if analysis.pros_cons:
                st.markdown("## ‚öñÔ∏è Pros & Cons")
                
                for category, items in analysis.pros_cons.items():
                    if items:  # Only show if there are items
                        st.subheader(f"üìã {category}")
                        
                        pros = []
                        cons = []
                        
                        for item in items:
                            if any(word.lower() in item.lower() for word in ["pro:", "advantage", "benefit", "positive", "strength"]):
                                pros.append(item)
                            elif any(word.lower() in item.lower() for word in ["con:", "disadvantage", "limitation", "negative", "weakness"]):
                                cons.append(item)
                            else:
                                if any(word.lower() in category.lower() for word in ["pro", "advantage", "benefit"]):
                                    pros.append(item)
                                else:
                                    cons.append(item)
                        
                        if pros:
                            st.markdown("**‚úÖ Pros:**")
                            for pro in pros:
                                clean_pro = pro.replace("Pro:", "").strip()
                                st.write(f"‚Ä¢ {clean_pro}")
                        
                        if cons:
                            st.markdown("**‚ùå Cons:**")
                            for con in cons:
                                clean_con = con.replace("Con:", "").strip()
                                st.write(f"‚Ä¢ {clean_con}")
                        
                        st.markdown("---")
            
            if analysis.gaps:
                st.markdown("## ‚ùì Knowledge Gaps")
                for gap in analysis.gaps:
                    st.write(f"‚Ä¢ {gap}")
            
            if analysis.recommendations:
                st.markdown("## üí° Recommendations")
                for rec in analysis.recommendations:
                    st.write(f"‚Ä¢ {rec}")
        
        if hasattr(result, 'citations') and result.citations:
            st.markdown("## üìñ Citations")
            for i, citation in enumerate(result.citations, 1):
                st.write(f"{i}. {citation}")
        
        st.markdown("## üìö Sources Analyzed")
        if result.sources and result.source_urls:
            for i, (source, url) in enumerate(zip(result.sources, result.source_urls), 1):
                st.markdown(f"**[{source}]({url})**")
                st.caption(f"üîó {url}")
                st.markdown("---")
        elif result.sources:
            for i, source in enumerate(result.sources, 1):
                st.write(f"{i}. {source}")
        else:
            st.write("No sources found.")
    elif st.session_state.selected_chat_index is not None:
        
        selected_chat = st.session_state.chats[st.session_state.selected_chat_index]
        st.success("Viewing saved research!")
        
        
        st.markdown("## üìã Research Summary")
        
        st.write(f"**Topic:** {selected_chat['topic']}")
        st.write(f"**Summary:** {selected_chat['summary']}")
        
        
        st.markdown("## üìö Sources Analyzed")
        if selected_chat['sources']:
            for i, source in enumerate(selected_chat['sources'], 1):
                st.write(f"{i}. {source}")
        else:
            st.write("No sources found.")
    else:
        st.info("No research results available. Click 'Start Research' to begin.")
    
    
    # Center the research buttons
    col1, col2, col3 = st.columns([1, 2, 1])
    with col2:
        col_left, col_right = st.columns(2)
        with col_left:
            if st.button("üîÑ New Research", use_container_width=True):
                st.session_state.research_started = False
                st.session_state.current_topic = ""
                st.session_state.research_result = None
                st.session_state.should_run_research = False
                st.session_state.selected_chat_index = None  
                st.rerun()
        
        with col_right:
            if st.button("üîÑ Re-run Research", use_container_width=True):
                st.session_state.should_run_research = True
                st.session_state.research_result = None
                st.session_state.selected_chat_index = None  
                st.rerun()
    
    
    if st.session_state.research_result or st.session_state.selected_chat_index is not None:
        st.markdown("---")
        st.markdown("## üíæ Download Report")
        
        if st.session_state.research_result:
            result = st.session_state.research_result
            topic = result.topic
            summary = result.summary
            sources = result.sources
            source_urls = result.source_urls if hasattr(result, 'source_urls') else None
            tools_used = result.tools_used if hasattr(result, 'tools_used') else None
        else:
            selected_chat = st.session_state.chats[st.session_state.selected_chat_index]
            topic = selected_chat['topic']
            summary = selected_chat['summary']
            sources = selected_chat['sources']
            source_urls = None
            tools_used = None
        
        
        safe_filename = topic.replace(' ', '_').replace('/', '_').replace('\\', '_')
        

        sources_text = ""
        if sources and source_urls:
            sources_text = chr(10).join(f"- {source}: {url}" for source, url in zip(sources, source_urls))
        elif sources:
            sources_text = chr(10).join(f"- {source}" for source in sources)
        
        report_data = f"""Research Report: {topic}

Summary:
{summary}

Sources:
{sources_text}"""

        
        if hasattr(result, 'analysis_result') and result.analysis_result:
            analysis = result.analysis_result
            report_data += f"""

ANALYSIS RESULTS:

Key Points:"""
            for i, point in enumerate(analysis.key_points, 1):
                report_data += f"""
{i}. {point.point}"""
                if point.source_url:
                    report_data += f" (Source: {point.source_url})"
            
            if analysis.trends:
                report_data += f"""

Trends & Patterns:"""
                for trend in analysis.trends:
                    report_data += f"""
- {trend.trend}: {trend.description}"""
            
            if analysis.viewpoints:
                report_data += f"""

Different Viewpoints:"""
                for viewpoint in analysis.viewpoints:
                    report_data += f"""
- {viewpoint.perspective}"""
                    for evidence in viewpoint.supporting_evidence:
                        report_data += f"""
  ‚Ä¢ {evidence}"""
            
            if analysis.gaps:
                report_data += f"""

Knowledge Gaps:"""
                for gap in analysis.gaps:
                    report_data += f"""
- {gap}"""
            
            if analysis.recommendations:
                report_data += f"""

Recommendations:"""
                for rec in analysis.recommendations:
                    report_data += f"""
- {rec}"""
        
        
        if hasattr(result, 'citations') and result.citations:
            report_data += f"""

CITATIONS (APA Style):"""
            for i, citation in enumerate(result.citations, 1):
                report_data += f"""
{i}. {citation}"""
        
        
        if hasattr(result, 'extraction_metadata') and result.extraction_metadata:
            metadata = result.extraction_metadata
            report_data += f"""

EXTRACTION STATISTICS:
- Total URLs: {metadata.get('total_urls', 0)}
- Successful Extractions: {metadata.get('successful_extractions', 0)}
- Extraction Methods: {', '.join(metadata.get('extraction_methods', []))}"""

        if tools_used:
            report_data += f"""

Tools Used:
{chr(10).join(f"- {tool}" for tool in tools_used)}"""
        
        
        markdown_data = ""
        if hasattr(result, 'analysis_result') and result.analysis_result:
            from content_analyzer import generate_report
            markdown_data = generate_report(result.analysis_result, "markdown")
        else:
            
            markdown_data = f"""# Research Report: {topic}

## Summary
{summary}

## Sources
{sources_text}

---
*Generated by Gist*"""
        

        col_txt, col_md, col_pdf = st.columns(3)
        
        with col_txt:
            st.download_button(
                label="üìÑ TXT",
                data=report_data,
                file_name=f"{safe_filename}_research.txt",
                mime="text/plain",
                use_container_width=True
            )
        
        with col_md:
            st.download_button(
                label="üìù Markdown",
                data=markdown_data,
                file_name=f"{safe_filename}_research.md",
                mime="text/markdown",
                use_container_width=True
            )
        
        with col_pdf:
            try:
                pdf_content = generate_pdf_report(topic, summary, sources, source_urls, tools_used)
                st.download_button(
                    label="üìÑ PDF",
                    data=pdf_content,
                    file_name=f"{safe_filename}_research.pdf",
                    mime="application/pdf",
                    use_container_width=True
                )
            except Exception as e:
                st.error(f"PDF generation failed: {str(e)}")
                st.info("Please try downloading as TXT or Markdown format instead.")
           